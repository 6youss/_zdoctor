import React from "react";
import { IconProps } from "react-native-vector-icons/Icon";
export * from "./index.shared";
export declare const MaterialIcons: (props: IconProps) => React.CElement<{
    style: (false | import("react-native").TextStyle | import("react-native").RegisteredStyle<import("react-native").TextStyle> | import("react-native").RecursiveArray<false | import("react-native").TextStyle | import("react-native").RegisteredStyle<import("react-native").TextStyle> | null | undefined> | {
        userSelect: string;
    } | null | undefined)[];
    size?: number | undefined;
    name: string;
    color?: string | undefined;
    allowFontScaling?: boolean | undefined;
    ellipsizeMode?: "head" | "middle" | "tail" | "clip" | undefined;
    lineBreakMode?: "head" | "middle" | "tail" | "clip" | undefined;
    numberOfLines?: number | undefined;
    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
    onPress?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onLongPress?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    testID?: string | undefined;
    nativeID?: string | undefined;
    maxFontSizeMultiplier?: number | null | undefined;
    adjustsFontSizeToFit?: boolean | undefined;
    minimumFontScale?: number | undefined;
    suppressHighlighting?: boolean | undefined;
    selectable?: boolean | undefined;
    selectionColor?: string | undefined;
    textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: import("react-native").AccessibilityActionName;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    accessibilityRole?: "button" | "header" | "link" | "menu" | "summary" | "menuitem" | "none" | "search" | "image" | "keyboardkey" | "text" | "adjustable" | "imagebutton" | "alert" | "checkbox" | "combobox" | "menubar" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
    accessibilityStates?: import("react-native").AccessibilityStates[] | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native").AccessibilityValue | undefined;
    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
    accessibilityComponentType?: "button" | "none" | "radiobutton_checked" | "radiobutton_unchecked" | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityTraits?: "button" | "header" | "link" | "summary" | "none" | "search" | "image" | "text" | "adjustable" | "disabled" | "selected" | "plays" | "key" | "frequentUpdates" | "startsMedia" | "allowsDirectInteraction" | "pageTurn" | import("react-native").AccessibilityTrait[] | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
}, React.Component<{
    style: (false | import("react-native").TextStyle | import("react-native").RegisteredStyle<import("react-native").TextStyle> | import("react-native").RecursiveArray<false | import("react-native").TextStyle | import("react-native").RegisteredStyle<import("react-native").TextStyle> | null | undefined> | {
        userSelect: string;
    } | null | undefined)[];
    size?: number | undefined;
    name: string;
    color?: string | undefined;
    allowFontScaling?: boolean | undefined;
    ellipsizeMode?: "head" | "middle" | "tail" | "clip" | undefined;
    lineBreakMode?: "head" | "middle" | "tail" | "clip" | undefined;
    numberOfLines?: number | undefined;
    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
    onPress?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onLongPress?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    testID?: string | undefined;
    nativeID?: string | undefined;
    maxFontSizeMultiplier?: number | null | undefined;
    adjustsFontSizeToFit?: boolean | undefined;
    minimumFontScale?: number | undefined;
    suppressHighlighting?: boolean | undefined;
    selectable?: boolean | undefined;
    selectionColor?: string | undefined;
    textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: import("react-native").AccessibilityActionName;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    accessibilityRole?: "button" | "header" | "link" | "menu" | "summary" | "menuitem" | "none" | "search" | "image" | "keyboardkey" | "text" | "adjustable" | "imagebutton" | "alert" | "checkbox" | "combobox" | "menubar" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
    accessibilityStates?: import("react-native").AccessibilityStates[] | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native").AccessibilityValue | undefined;
    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
    accessibilityComponentType?: "button" | "none" | "radiobutton_checked" | "radiobutton_unchecked" | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityTraits?: "button" | "header" | "link" | "summary" | "none" | "search" | "image" | "text" | "adjustable" | "disabled" | "selected" | "plays" | "key" | "frequentUpdates" | "startsMedia" | "allowsDirectInteraction" | "pageTurn" | import("react-native").AccessibilityTrait[] | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
}, any, any>>;
export declare const Octicons: (props: IconProps) => React.CElement<{
    style: (false | import("react-native").TextStyle | import("react-native").RegisteredStyle<import("react-native").TextStyle> | import("react-native").RecursiveArray<false | import("react-native").TextStyle | import("react-native").RegisteredStyle<import("react-native").TextStyle> | null | undefined> | {
        userSelect: string;
    } | null | undefined)[];
    size?: number | undefined;
    name: string;
    color?: string | undefined;
    allowFontScaling?: boolean | undefined;
    ellipsizeMode?: "head" | "middle" | "tail" | "clip" | undefined;
    lineBreakMode?: "head" | "middle" | "tail" | "clip" | undefined;
    numberOfLines?: number | undefined;
    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
    onPress?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onLongPress?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    testID?: string | undefined;
    nativeID?: string | undefined;
    maxFontSizeMultiplier?: number | null | undefined;
    adjustsFontSizeToFit?: boolean | undefined;
    minimumFontScale?: number | undefined;
    suppressHighlighting?: boolean | undefined;
    selectable?: boolean | undefined;
    selectionColor?: string | undefined;
    textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: import("react-native").AccessibilityActionName;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    accessibilityRole?: "button" | "header" | "link" | "menu" | "summary" | "menuitem" | "none" | "search" | "image" | "keyboardkey" | "text" | "adjustable" | "imagebutton" | "alert" | "checkbox" | "combobox" | "menubar" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
    accessibilityStates?: import("react-native").AccessibilityStates[] | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native").AccessibilityValue | undefined;
    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
    accessibilityComponentType?: "button" | "none" | "radiobutton_checked" | "radiobutton_unchecked" | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityTraits?: "button" | "header" | "link" | "summary" | "none" | "search" | "image" | "text" | "adjustable" | "disabled" | "selected" | "plays" | "key" | "frequentUpdates" | "startsMedia" | "allowsDirectInteraction" | "pageTurn" | import("react-native").AccessibilityTrait[] | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
}, React.Component<{
    style: (false | import("react-native").TextStyle | import("react-native").RegisteredStyle<import("react-native").TextStyle> | import("react-native").RecursiveArray<false | import("react-native").TextStyle | import("react-native").RegisteredStyle<import("react-native").TextStyle> | null | undefined> | {
        userSelect: string;
    } | null | undefined)[];
    size?: number | undefined;
    name: string;
    color?: string | undefined;
    allowFontScaling?: boolean | undefined;
    ellipsizeMode?: "head" | "middle" | "tail" | "clip" | undefined;
    lineBreakMode?: "head" | "middle" | "tail" | "clip" | undefined;
    numberOfLines?: number | undefined;
    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
    onPress?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onLongPress?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    testID?: string | undefined;
    nativeID?: string | undefined;
    maxFontSizeMultiplier?: number | null | undefined;
    adjustsFontSizeToFit?: boolean | undefined;
    minimumFontScale?: number | undefined;
    suppressHighlighting?: boolean | undefined;
    selectable?: boolean | undefined;
    selectionColor?: string | undefined;
    textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: import("react-native").AccessibilityActionName;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    accessibilityRole?: "button" | "header" | "link" | "menu" | "summary" | "menuitem" | "none" | "search" | "image" | "keyboardkey" | "text" | "adjustable" | "imagebutton" | "alert" | "checkbox" | "combobox" | "menubar" | "progressbar" | "radio" | "radiogroup" | "scrollbar" | "spinbutton" | "switch" | "tab" | "tablist" | "timer" | "toolbar" | undefined;
    accessibilityStates?: import("react-native").AccessibilityStates[] | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native").AccessibilityValue | undefined;
    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
    accessibilityComponentType?: "button" | "none" | "radiobutton_checked" | "radiobutton_unchecked" | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityTraits?: "button" | "header" | "link" | "summary" | "none" | "search" | "image" | "text" | "adjustable" | "disabled" | "selected" | "plays" | "key" | "frequentUpdates" | "startsMedia" | "allowsDirectInteraction" | "pageTurn" | import("react-native").AccessibilityTrait[] | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
}, any, any>>;
